
@article{bucholtzNewLanguageAims1995,
  title = {New Language Aims for {{Web}} Supremacy},
  author = {Bucholtz, Chris},
  date = {1995-12-11},
  journaltitle = {Telephony; Chicago},
  volume = {229},
  pages = {12},
  issn = {00402656},
  url = {http://search.proquest.com/docview/213962331/abstract/E93A6030A0874858PQ/1},
  urldate = {2019-10-13},
  abstract = {Sun Microsystems Inc. and Netscape Communications Corp. have announced JavaScript, an easy-to-use object oriented-programming language for the World Wide Web. Users can assemble applications from prefabricated chunks of computer code, rather than having to write those components from scratch. The new language will be distributed free through the Internet.},
  file = {/Users/joshgibson/Zotero/storage/MTVT5DIN/Bucholtz - 1995 - New language aims for Web supremacy.pdf},
  keywords = {Communications--Telephone And Telegraph,Freeware,Object oriented programming,Product introduction,Programming languages,World Wide Web},
  langid = {english},
  number = {24}
}

@unpublished{byronKeynoteBriefHistory2019,
  title = {Keynote: {{A Brief History}} of {{GraphQL}}},
  shorttitle = {{{GraphQL Keynote}}},
  author = {Byron, Lee},
  date = {2019-11-03},
  url = {https://www.youtube.com/watch?v=VjHWkBr3tjI},
  urldate = {2019-10-02},
  abstract = {Keynote: A Brief History of GraphQL - Lee Byron, Co-Creator of GraphQL\&nbsp;

Lee Byron
GraphQL, Design Technologist},
  eventtitle = {Open {{Source Leadership Summit}} 2019}
}

@online{carlJoinMonster,
  title = {Join {{Monster}}},
  author = {Carl, Andy},
  url = {https://join-monster.readthedocs.io/en/latest/},
  urldate = {2019-10-20},
  file = {/Users/joshgibson/Zotero/storage/WAXBK5SQ/latest.html}
}

@unpublished{fieldingArchitecturalStylesDesign2000,
  title = {Architectural {{Styles}} and the {{Design}} of {{Network}}-Based {{Software Architectures}}},
  author = {Fielding, Roy Thomas},
  date = {2000},
  location = {{University of California, Irvine}},
  file = {/Users/joshgibson/Zotero/storage/L8N6DBLY/Fielding - 2000 - in Information and Computer Science.pdf},
  howpublished = {Doctoral Dissertation},
  langid = {english},
  type = {Doctoral Dissertation}
}

@online{fowlerInversionControlContainers2004,
  title = {Inversion of {{Control Containers}} and the {{Dependency Injection}} Pattern},
  author = {Fowler, Martin},
  date = {2004-01-23},
  journaltitle = {martinfowler.com},
  url = {https://martinfowler.com/articles/injection.html},
  urldate = {2019-11-10},
  abstract = {Explaining the Dependency Injection pattern, by contrasting it with Service Locator. The choice between them is less important than the principle of separating configuration from use.},
  file = {/Users/joshgibson/Zotero/storage/NEGY82M2/injection.html}
}

@collection{gammaDesignPatternsElements1995,
  title = {Design Patterns: Elements of Reusable Object-Oriented Software},
  shorttitle = {Design Patterns},
  editor = {Gamma, Erich},
  date = {1995},
  publisher = {{Addison-Wesley}},
  location = {{Reading, Mass}},
  isbn = {978-0-201-63361-0},
  keywords = {Computer software,Object-oriented programming (Computer science),Reusability,Software patterns},
  pagetotal = {395},
  series = {Addison-{{Wesley}} Professional Computing Series}
}

@online{hasurainc.HasuraGraphQLEngine,
  title = {Hasura {{GraphQL Engine}}},
  author = {Hasura Inc.},
  url = {https://docs.hasura.io/1.0/graphql/manual/index.html},
  urldate = {2019-10-20},
  file = {/Users/joshgibson/Zotero/storage/P27XVG8F/hasura.io.html}
}

@online{idgnewsservicestaffMicrosoftAugmentsJavaScript2012,
  title = {Microsoft Augments {{JavaScript}} for Large-Scale Development},
  author = {IDG News Service staff},
  date = {2012-10-01T16:53-05:00},
  journaltitle = {InfoWorld},
  url = {https://www.infoworld.com/article/2614863/microsoft-augments-javascript-for-large-scale-development.html},
  urldate = {2019-10-14},
  abstract = {In an extension to JavaScript, Microsoft provides static typing, classes and modularization},
  file = {/Users/joshgibson/Zotero/storage/IXPF4Q2K/microsoft-augments-javascript-for-large-scale-development.html},
  langid = {english}
}

@software{lytekTypegraphql2019,
  title = {Type-Graphql},
  author = {Lytek, Michał},
  date = {2019-10-20T15:59:03Z},
  origdate = {2018-01-09T15:58:38Z},
  url = {https://github.com/MichalLytek/type-graphql},
  urldate = {2019-10-20},
  abstract = {Create GraphQL schema and resolvers with TypeScript, using classes and decorators!},
  keywords = {api,apollographql,controllers,decorators,gql,graphql,graphql-js,graphql-schema,resolvers,schema,typescript}
}

@article{malenfantTutorialBehavioralReflection1996,
  title = {A {{Tutorial}} on {{Behavioral Reflection}} and Its {{Implementation}}},
  author = {Malenfant, Jacques and Jacques, M. and Demers, F.},
  date = {1996-01-01},
  abstract = {The eecient implementation of behaviorally reeec-tive languages imposes a formidable challenge. By deenition, behavioral reeection allows a program to modify, e v en at run-time, its own code as well as the semantics and the implementation of its own programming language. This late-binding of the language semantics favors interpretive techniques, but compilers are absolutely necessary to make reeec-tive languages eecient and therefore of real interest. The goals of this tutorial are: 1 to give the picture of the state of the art in the eecient implementation of behavioral reeection, 2 to review the main issues in going from interpreter-based to compiler-based implementations and 3 to propose new avenues towards the realization of this objective. Our tutorial is aimed at a large audience of reeective language implementors, in either object-oriented, functional or even logic programming. To make our point widely applicable, we avoid ne-grain technicalities. Rather we emphasize the common denominator of all reeective languages, we propose a clear and general problem statement, and we set up a wide-ranging research agenda.},
  file = {/Users/joshgibson/Zotero/storage/QJKVR4QF/Malenfant et al. - 1996 - A Tutorial on Behavioral Reflection and its Implem.pdf}
}

@book{masseRESTAPIDesign2012,
  title = {{{REST API}} Design Rulebook: Designing Consistent {{RESTful Web Service Interfaces}}},
  shorttitle = {{{REST API}} Design Rulebook},
  author = {Massé, Mark},
  date = {2012},
  publisher = {{O'Reilly}},
  location = {{Beijing}},
  file = {/Users/joshgibson/Zotero/storage/NXKTDQJ3/Massé - 2012 - REST API design rulebook designing consistent RES.pdf},
  isbn = {978-1-4493-1050-9},
  langid = {english},
  pagetotal = {94}
}

@online{mysliwiecDocumentation2019,
  title = {Documentation},
  author = {Mysliwiec, Kamil},
  date = {2019},
  journaltitle = {NestJS - A progressive Node.js framework},
  url = {https://docs.nestjs.com},
  urldate = {2019-12-12},
  abstract = {Nest is a framework for building efficient, scalable Node.js server-side applications. It uses progressive JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Progamming), FP (Functional Programming), and FRP (Functional Reactive Programming).},
  file = {/Users/joshgibson/Zotero/storage/PJYVS2FF/docs.nestjs.com.html},
  langid = {english}
}

@online{mysliwiecNestJSProgressiveNode2019,
  title = {{{NestJS}} - {{A}} Progressive {{Node}}.Js Web Framework},
  author = {Mysliwiec, Kamil},
  date = {2019},
  url = {https://nestjs.com},
  urldate = {2019-10-14},
  abstract = {NestJS is a framework for building efficient, scalable Node.js web applications. It uses modern JavaScript, is built with TypeScript and combines elements of OOP (Object Oriented Progamming), FP (Functional Programming), and FRP (Functional Reactive Programming).},
  file = {/Users/joshgibson/Zotero/storage/WM4P9TNW/nestjs.com.html}
}

@audio{pramodEpisodeInterviewRyan,
  title = {Episode 8: {{Interview}} with {{Ryan Dahl}}, {{Creator}} of {{Node}}.Js},
  shorttitle = {Episode 8},
  author = {Pramod, HS},
  url = {https://mappingthejourney.com/single-post/2017/08/31/episode-8-interview-with-ryan-dahl-creator-of-nodejs/},
  urldate = {2019-10-13},
  abstract = {Ryan Dahl is a Software Engineer working at Google Brain. He is the creator of Node.js,~JavaScript runtime built on Chrome’s V8 JavaScript engine. Currently, he is working on deep learBrowserifyning research projects. His focus is mostly on image-to-image transformations like colorization and super-resolution. He has contributed to several open source projects including HTTP Parser, libuv. … Continue reading Episode 8: Interview with Ryan Dahl, Creator of Node.js},
  file = {/Users/joshgibson/Zotero/storage/JSPHC7YE/episode-8-interview-with-ryan-dahl-creator-of-nodejs.html},
  langid = {american},
  number = {8},
  series = {Mapping the {{Journey}}}
}

@audio{redhatinc.CreatingJavaScript,
  title = {Creating {{JavaScript}}},
  author = {Red Hat Inc.},
  url = {https://www.redhat.com/en/command-line-heroes/season-3/creating-javascript},
  urldate = {2019-11-13},
  number = {3.3},
  series = {Command {{Line Heroes}}}
}

@report{stackoverflowStackOverflowDeveloper,
  title = {Stack {{Overflow Developer Survey}} 2019},
  author = {Stack Overflow},
  url = {https://insights.stackoverflow.com/survey/2019/?utm_source=social-share&utm_medium=social&utm_campaign=dev-survey-2019},
  urldate = {2019-10-14},
  abstract = {Nearly 90,000 took this comprehensive, annual survey of people who code. Demographics. Most loved, dreaded and wanted technologies. Salary and careers.},
  file = {/Users/joshgibson/Zotero/storage/N9MCVK7B/2019.html}
}

@online{turnerAnnouncingTypeScript2015,
  title = {Announcing {{TypeScript}} 1.5},
  author = {Turner, Jonathan},
  date = {2015-07-20T07:55:00+00:00},
  journaltitle = {Microsoft TypeScript Blog},
  url = {https://devblogs.microsoft.com/typescript/announcing-typescript-1-5/},
  urldate = {2019-10-14},
  abstract = {Today we’re happy to announce the release of TypeScript 1.5. ~This release took an alpha, a beta, and your help to get here. ~It’s a big one, so let’s get started!
TypeScript 1.5 is part of the newly released Visual Studio 2015.},
  file = {/Users/joshgibson/Zotero/storage/VHA6TYE4/announcing-typescript-1-5.html},
  langid = {american}
}


